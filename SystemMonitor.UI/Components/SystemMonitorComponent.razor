@using SystemMonitor.Core.Models
@using SystemMonitor.Core.Services
@inject ISystemMonitorService MonitorService

<div class="system-monitor">
    <h3>Моніторинг</h3>

    <div class="metrics-grid">
        <div class="metric-card">
            <h4>CPU Usage</h4>
            <div class="progress">
                <div class="progress-bar @GetProgressBarClass(CurrentMetrics?.CpuUsage ?? 0)"
                     style="width: @(CurrentMetrics?.CpuUsage ?? 0)%">
                    @(Math.Round(CurrentMetrics?.CpuUsage ?? 0, 1))%
                </div>
            </div>
        </div>

        <div class="metric-card">
            <h4>Memory Usage</h4>
            <div class="progress">
                <div class="progress-bar @GetProgressBarClass(CurrentMetrics?.MemoryUsage ?? 0)"
                     style="width: @(CurrentMetrics?.MemoryUsage ?? 0)%">
                    @(Math.Round(CurrentMetrics?.MemoryUsage ?? 0, 1))%
                </div>
            </div>
        </div>

        <div class="metric-card">
            <h4>Disk Usage</h4>
            <div class="progress">
                <div class="progress-bar @GetProgressBarClass(CurrentMetrics?.DiskUsage ?? 0)"
                     style="width: @(CurrentMetrics?.DiskUsage ?? 0)%">
                    @(Math.Round(CurrentMetrics?.DiskUsage ?? 0, 1))%
                </div>
            </div>
        </div>

        @if (CurrentMetrics?.NetworkMetrics != null)
        {
            <div class="metric-card">
                <h4>Network Activity</h4>
                <div>
                    <p>Sent: @FormatBytes(CurrentMetrics.NetworkMetrics.BytesSent)</p>
                    <p>Received: @FormatBytes(CurrentMetrics.NetworkMetrics.BytesReceived)</p>
                    <p>Bandwidth: @FormatBytes(CurrentMetrics.NetworkMetrics.CurrentBandwidth)/s</p>
                </div>
            </div>
        }
    </div>

    @if (IsCritical)
    {
        <div class="alert alert-danger mt-3">
           Ресурси в критичних показниках 
        </div>
    }
</div>

@code {
    private SystemMetrics CurrentMetrics { get; set; }
    private bool IsCritical { get; set; }
    private Timer? _updateTimer;

    protected override async Task OnInitializedAsync()
    {
        await UpdateMetrics();
        _updateTimer = new Timer(async void (_) =>
        {
            await UpdateMetrics();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task UpdateMetrics()
    {
        CurrentMetrics = await MonitorService.GetCurrentMetricsAsync();
        IsCritical = await MonitorService.IsResourceCriticalAsync(CurrentMetrics);
    }

    private string GetProgressBarClass(double value)
    {
        return value switch
        {
            >= 90 => "bg-danger",
            >= 75 => "bg-warning",
            _ => "bg-success"
        };
    }

    private string FormatBytes(double bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        while (bytes >= 1024 && order < sizes.Length - 1)
        {
            order++;
            bytes = bytes / 1024;
        }
        return $"{bytes:0.##} {sizes[order]}";
    }

    public void Dispose()
    {
        _updateTimer?.Dispose();
    }
}

<style>
    .system-monitor {
        padding: 20px;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .metric-card {
        padding: 15px;
        border-radius: 8px;
        background-color: #f8f9fa;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .progress {
        height: 25px;
        margin-top: 10px;
        background-color: #e9ecef;
        border-radius: 4px;
    }

    .progress-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        transition: width 0.3s ease;
    }
</style>